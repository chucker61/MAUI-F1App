@page "/standings"
@using F1App.Models.ErgastApiModels
@using Newtonsoft.Json


<MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary">
    <MudTabPanel Text="Driver">
        @if (RootDriver is not null)
        {
            <MudSimpleTable Class="my-5 rounded-xl" Dense="true" Striped="true" FixedHeader="true">
                <thead>
                    <tr>
                        <th>Pos</th>
                        <th>Driver</th>
                        <th>Constructor</th>
                        <th>Points</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var result in RootDriver.MRData.StandingsTable.StandingsLists[0].DriverStandings)
                    {
                        <tr>
                            <td>@result.position</td>
                            <td>@result.Driver.familyName[0]@result.Driver.familyName[1]@result.Driver.familyName[2]</td>
                            <td>@result.Constructors[0].name</td>
                            <td>@result.points</td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        }
    </MudTabPanel>
    <MudTabPanel Text="Constructor">
        @if (RootConstructor is not null)
        {
            <MudSimpleTable Class="my-5 rounded-xl" Dense="true" Striped="true" FixedHeader="true">
                <thead>
                    <tr>
                        <th>Pos</th>
                        <th>Constructor</th>
                        <th>Points</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var result in RootConstructor.MRData.StandingsTable.StandingsLists[0].ConstructorStandings)
                    {
                        <tr>
                            <td>@result.position</td>
                            <td>@result.Constructor.name</td>
                            <td>@result.points</td>

                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        }
    </MudTabPanel>
</MudTabs>

@code {
    [Inject]
    public IHttpClientFactory ClientFactory { get; set; } = default!;
    private Root RootDriver { get; set; } = null!;
    private Root RootConstructor { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient("ApiErgast");

        var driverResponse = await client.GetAsync($"ergast/f1/{DateTime.Now.Year}/driverstandings.json");
        if (driverResponse.IsSuccessStatusCode)
        {
            var driverContent = await driverResponse.Content.ReadAsStringAsync();
            RootDriver = JsonConvert.DeserializeObject<Root>(driverContent) ?? new();
        }

        var constructorResponse = await client.GetAsync($"ergast/f1/{DateTime.Now.Year}/constructorstandings.json");
        if (constructorResponse.IsSuccessStatusCode)
        {
            var constructorContent = await constructorResponse.Content.ReadAsStringAsync();
            RootConstructor = JsonConvert.DeserializeObject<Root>(constructorContent) ?? new();
        }
    }
}
