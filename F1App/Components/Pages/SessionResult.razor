@page "/sessionResult/{season:int}/{round:int}/{type}"
@inject ISnackbar Snackbar
@using F1App.Models.ErgastApiModels
@using F1App.Models.OpenApiModels
@using System.Collections.ObjectModel
@using Newtonsoft.Json


@if (Root is not null)
{
    <SessionResultTableComponent Results="@Results" SprintResults="@SprintResults" QualifyingResults="@QualifyingResults"></SessionResultTableComponent>
}
else
{
    <MudStack Class="d-flex justify-center">
        @for (int i = 0; i < 20; i++)
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Width="80%" Height="20px" Class="ma-3 rounded-xl" />
        }
    </MudStack>
}

@code {
    [Inject]
    private IHttpClientFactory ClientFactory { get; set; } = default!;

    [Parameter]
    public int Season { get; set; }
    [Parameter]
    public int Round { get; set; }
    [Parameter]
    public string? Type { get; set; }

    public Root Root { get; set; } = default!;
    public ObservableCollection<Result>? Results { get; set; } = default!;
    public ObservableCollection<QualifyingResult>? QualifyingResults { get; set; } = default!;
    public ObservableCollection<SprintResult>? SprintResults { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient("ApiErgast");

        var response = await client.GetAsync($"ergast/f1/{Season}/{Round}/{Type}.json");

        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add("Error loading data", Severity.Error);
        }

        var content = await response.Content.ReadAsStringAsync();
        Root = JsonConvert.DeserializeObject<Root>(content) ?? new();

        if (Root.MRData.RaceTable.Races.Count == 0)
        {
            Snackbar.Add("Error loading data", Severity.Error);
        }
        else
        {
            if (Root.MRData.RaceTable.Races[0].Results is not null)
            {
                Results = new ObservableCollection<Result>(Root.MRData.RaceTable.Races[0].Results);
            }
            else if (Root.MRData.RaceTable.Races[0].QualifyingResults is not null)
            {
                QualifyingResults = new ObservableCollection<QualifyingResult>(Root.MRData.RaceTable.Races[0].QualifyingResults);
            }
            else if (Root.MRData.RaceTable.Races[0].SprintResults is not null)
            {
                SprintResults = new ObservableCollection<SprintResult>(Root.MRData.RaceTable.Races[0].SprintResults);
            }
        }


    }
}
